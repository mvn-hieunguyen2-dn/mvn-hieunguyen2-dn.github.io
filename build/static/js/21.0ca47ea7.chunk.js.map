{"version":3,"sources":["selectors/CommonSelectors.js","actions/MessengerActions.js","components/Test.jsx","containers/TestContainer.jsx"],"names":["getUser","state","user","getApp","app","getExample","exam","getNotifications","notification","getMessenger","messenger","createId","length","result","characters","charactersLength","i","charAt","Math","floor","random","initMessages","roomId","dispatch","a","getDoc","doc","getFS","currentRoom","type","UPDATE_CURRENT_ROOM","payload","data","CLEAR_MESSAGES","msgs","first","query","collection","orderBy","limit","getDocs","docSnapshots","lastVisible","docs","forEach","e","push","UPDATE_MESSAGES","messages","fetchMoreMessages","lastVisibleState","currentMessages","next","startAfter","nexDocSnapshots","newLastVisible","FETCH_MORE_MESSAGES","concat","createNewMessage","message","authorId","trim","newMsgId","newMsg","author","checked","createdAt","Date","now","messagesPath","docRef","then","res","exists","setDoc","catch","console","log","alert","createRoomByMembers","navigate","membersDetails","members","room","q","where","currentRooms","find","JSON","stringify","sort","newRoomId","initRooms","currentUser","uid","rooms","UPDATE_MESSENGER","fetchMoreRooms","lastVisibleRoomState","FETCH_MORE_ROOMS","lastVisibleRoom","deleteRoom","deleteDoc","DELETE_ROOM","Test","className","connect"],"mappings":"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","file":"static/js/21.0ca47ea7.chunk.js","sourcesContent":["// GAMES\nexport const getGames = state => state.games;\n\n// ROUTER\nexport const getGenre = state => {\n  const { query, tag, genre } = state.router.route.options;\n  return query || tag ? '' : genre || 'action';\n};\n\nexport const getSearch = state => state.router.route.options.query;\n\nexport const getSlug = state => state.router.route.keys.slug || '';\n\nexport const getTag = state => {\n  return state.router.route.options.tag;\n};\n\nexport const getUsername = state => state.router.route.keys.username;\n\n// APP\nexport const getWindowSize = state => state.app.windowSize;\nexport const getChooseUseFirebase = state => state.app.useFirebase;\n\n// USER\nexport const getUser = state => state.user;\n\nexport const getLikes = state => state.user.likes;\n\nexport const getIsAuthenticated = state => !!state.user.currentUser;\nexport const getApp = state => state.app;\n\n// USER PROFILE\nexport const getUserProfile = state => state.profile;\n\n//EXAMPLE\nexport const getExample = state => state.exam;\n\n// MESSAGES\n\nexport const getNotifications = state => state.notification;\n\nexport const getMessenger = state => state.messenger;\n\n","import {\n  collection,\n  getDocs,\n  startAfter,\n  query,\n  limit,\n  orderBy,\n  getDoc,\n  doc,\n  where,\n  setDoc,\n  deleteDoc\n} from 'firebase/firestore';\nimport {\n  FETCH_MORE_MESSAGES,\n  UPDATE_MESSENGER,\n  UPDATE_CURRENT_ROOM,\n  UPDATE_MESSAGES,\n  CLEAR_MESSAGES,\n  FETCH_MORE_ROOMS,\n  DELETE_ROOM\n} from '../constance/ActionTypes';\nimport { getFS } from \"../firebase\";\n\n// make an ID\nfunction createId(length) {\n  let result = '';\n  let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let charactersLength = characters.length;\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() *\n      charactersLength));\n  }\n  return result;\n}\n\nexport const initMessages = (roomId) => async dispatch => {\n  const currentRoom = await getDoc(doc(getFS, `chats/${roomId}`));\n  dispatch({type: UPDATE_CURRENT_ROOM, payload: {currentRoom: currentRoom.data()}})\n  dispatch({ type: CLEAR_MESSAGES })\n  if (!roomId) return;\n  let msgs = [];\n  const first = query(collection(getFS, `chats/${roomId}/messages`), orderBy('createdAt', 'desc'), limit(15));\n  const docSnapshots = await getDocs(first);\n  const lastVisible = docSnapshots.docs[docSnapshots.docs.length - 1];\n  if (!lastVisible) return;\n  docSnapshots.forEach((e) => msgs.push(e.data()));\n  dispatch({ type: UPDATE_MESSAGES, payload: { messages: msgs, lastVisible: lastVisible } });\n\n}\n\nexport const fetchMoreMessages = (roomId, lastVisibleState = null, currentMessages = []) => async dispatch => {\n  let msgs = [];\n  if (!roomId || !lastVisibleState || currentMessages.length === 0) return true;\n  const next = query(collection(getFS, `chats/${roomId}/messages`),\n    orderBy(\"createdAt\", 'desc'),\n    startAfter(lastVisibleState),\n    limit(10));\n  const nexDocSnapshots = await getDocs(next);\n  const newLastVisible = nexDocSnapshots.docs[nexDocSnapshots.docs.length - 1];\n  if (!newLastVisible) return true;\n  nexDocSnapshots.forEach((e) => msgs.push(e.data()));\n  dispatch({ type: FETCH_MORE_MESSAGES, payload: { messages: currentMessages.concat(msgs), lastVisible: newLastVisible } });\n  return true\n}\n\nexport const createNewMessage = (roomId, message, authorId) => dispatch => {\n  if (!roomId || !authorId || message.trim().length === 0) return;\n  let newMsgId = createId(10);\n\n  let newMsg = {\n    message: message,\n    author: authorId,\n    checked: false,\n    createdAt: Date.now()\n  }\n  // dispatch({ type: SEND_MESSAGE_SUCCESS, payload: { message: newMsg } })\n\n  const messagesPath = `chats/${roomId}/messages`;\n  // check room exist\n  const docRef = doc(getFS, 'chats', roomId)\n  getDoc(docRef)\n    .then((res) => {\n      if (res.exists()) {\n        setDoc(doc(getFS, messagesPath, newMsgId), newMsg)\n          .then(() => {\n          })\n          .catch((e) => console.log(e.message))\n      }\n    })\n    .catch((e) => alert(e.message));\n\n}\n\nexport const createRoomByMembers = (navigate, authorId, membersDetails = [], members = []) => dispatch => {\n  if (!navigate || !authorId || membersDetails?.length === 0 || members?.length === 0) return;\n  let room;\n  const q = query(collection(getFS, `chats`), where('members', 'array-contains', `${authorId}`));\n  getDocs(q)\n    .then((res) => {\n      let currentRooms = [];\n      res.forEach((e) => {\n        currentRooms.push(e.data())\n      });\n      room = currentRooms.find((e) => JSON.stringify(e?.members.sort()) === JSON.stringify(members.sort()));\n\n    })\n    .then(() => {\n      if (room) {\n        navigate?.push(`/messages/${room?.roomId}`);\n      } else {\n        // room not existed\n\n        let newRoomId = createId(10);\n        let currentRoom = {\n          createdAt: Date.now(),\n          members: members,\n          roomId: newRoomId,\n          membersDetails: membersDetails\n        }\n        setDoc(doc(getFS, `chats`, newRoomId), currentRoom)\n        .then(() => {\n          dispatch({ type: UPDATE_CURRENT_ROOM, payload: { currentRoom: currentRoom} });\n          navigate?.push(`/messages/${newRoomId}`);\n        })\n      }\n\n    })\n\n\n\n}\n\nexport const initRooms = (currentUser) => dispatch => {\n\n  const first = query(collection(getFS, `chats`), where('members', 'array-contains', `${currentUser?.uid}`),\n  orderBy('createdAt', 'desc'), limit(10));\n  getDocs(first)\n    .then((res) => {\n      const rooms =[];\n      res.forEach((e) => {\n        rooms.push(e.data())\n      });\n      dispatch({type: UPDATE_MESSENGER, payload: {rooms: rooms, lastVisible: res.docs[res.docs.length - 1]}})\n    })\n    .catch((e) => {\n      console.log(e.message)\n    })\n\n}\n\nexport const fetchMoreRooms = (currentUser, lastVisibleRoomState = null, currentRooms = []) => async dispatch => {\n  const next = query(collection(getFS, `chats`), where('members', 'array-contains', `${currentUser?.uid}`, \n  orderBy('createdAt', 'desc'), \n  startAfter(lastVisibleRoomState),\n  limit(5)))\n  let rooms = [];\n  if (!currentUser || !lastVisibleRoomState || currentRooms.length === 0) return true;\n  \n  const nexDocSnapshots = await getDocs(next);\n  const newLastVisible = nexDocSnapshots.docs[nexDocSnapshots.docs.length - 1];\n  if (!newLastVisible) return true;\n  nexDocSnapshots.forEach((e) => rooms.push(e.data()));\n  dispatch({ type: FETCH_MORE_ROOMS, payload: { rooms: rooms, lastVisibleRoom: newLastVisible } });\n  return true\n}\n\nexport const deleteRoom = (roomId) => dispatch => {\n  deleteDoc(doc(getFS, `chats/${roomId}`))\n    .then(() => {\n      dispatch({type: DELETE_ROOM, payload: {roomId}})\n    })\n}","import React from 'react';\nconst Test = ({ currentUser, currentMessages, fetchMoreMessages, lastVisible, initMessages\n  \n}) => {\n\n  \n\n  return (\n    <div className='test'>\n      \n    </div>\n  )\n}\n\nexport default Test\n","import { connect } from 'react-redux';\nimport Test from '../components/Test';\nimport { getUser, getMessenger} from '../selectors/CommonSelectors';\nimport {initMessages, fetchMoreMessages} from '../actions/MessengerActions'\n\n\nconst mapStateToProps = (state) => {\n\n  return {\n    ...getUser(state),\n    ...getMessenger(state)\n  }\n}\n\n\nexport default connect(mapStateToProps, {fetchMoreMessages, initMessages })(Test)"],"sourceRoot":""}